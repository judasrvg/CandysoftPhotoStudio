@page "/login"
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components
@using Tattoo.Management.Helpers
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Radzen.Blazor.Rendering
@using System.Text.Json
@using Tattoo.Management.Models.Forms
@using Tattoo.Management.Security
@inject IJSRuntime JSRuntime;
@inject LazyAssemblyLoader loader;
@inject NavigationManager NavigationManager;
@inject GlobalState stateService;
@inject NotificationService _notificationService;

<NotranslateDirective>
    <RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;background-color:transparent;">
        <RadzenTemplateForm Data=@("LoginWithDefaultValues") class="text-center">
            <RadzenPassword Placeholder="Enter your password" @bind-Value="password" Style="width:100%;" Change="OnLogin" />
            <RadzenButton Text="Login" class="m-2" Click="@OnLogin" Style="width:50%;" />
        </RadzenTemplateForm>
    </RadzenCard>
</NotranslateDirective>

@code {
    private string password;

    private async Task OnLogin()
    {
        const string correctPasswordHash = "240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9"; // Hash de "tattoo99"
        const string correctPasswordHashVendedor = "bc431c22f966ff587d08bec8f58b97425d05c402e54c9052888b3a3ab1b7f7a3"; // Hash de "tattoo99"

        string enteredPasswordHash = PasswordHasher.HashPassword(password);

  if (enteredPasswordHash == correctPasswordHash || enteredPasswordHash == correctPasswordHashVendedor)
        {
            stateService.IsAuthenticated = true;
            _notificationService.Notify(NotificationSeverity.Success, "Authorized", "WELCOME!", 4000);
            
            await SetAuthDateInLocalStorage(enteredPasswordHash == correctPasswordHashVendedor ? "V" :"A");
            NavigationManager.NavigateTo("/"); // Redirigir a la página principal
        }
        else
        {
            _notificationService.Notify(NotificationSeverity.Error, "Unauthorized", "Invalid Password", 4000);
        }
    }


    private async Task SetAuthDateInLocalStorage(string Role)
    {
        var today = DateTime.Now.Date;
        var authDate = today.ToString("yyyy-MM-dd"); // Formatea la fecha solo con año, mes y día
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "auth_date", authDate);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "auth_role", Role);
    }
}
