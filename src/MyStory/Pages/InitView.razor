@page "/newcarousel"
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<body>
    <div class="carousel">
        <div class="list">
            @for (int i = 0; i < Images.Count; i++)
            {
                var imageUrl = Images[i];
                var description = GetMessage(i);
                var name = GetGeneratedName(i);
                var showTitle = (i == 0 || i == 1); // Mostrar título solo en la primera y última imagen

                <div class="item" style="background-image: url(@imageUrl);">
                    <div class="content">
                        
                            <div class="title">Recuerdos</div>
                        
                        <div class="name">@name</div>
                        <div class="des">@description</div>
                        
                    </div>
                </div>
            }
        </div>

        <!--next prev button-->
        <div class="arrows">
            <button class="prev">&#9664;</button> <!-- Flecha izquierda -->
            <button class="next">&#9654;</button> <!-- Flecha derecha -->
        </div>
        <div class="carousel-text-overlay">
            @* <div class="intro-container">
                <h1 class="intro-title MyMissFont">Mi Galería de Recuerdos</h1>
                <p class="intro-subtitle"></p>
            </div> *@
        </div>
        <!-- time running -->
        <div class="timeRunning"></div>
    </div>
</body>

@code {
    private List<string> Images = new List<string>
    {
        "css/images/img_1.webp",
        "css/images/img_2.webp",
        "css/images/img_3.webp",
        "css/images/img_4.webp",
        "css/images/img_5.webp",
    };

    private Dictionary<string, List<string>> Messages;
    private string SiteType;

    protected override void OnInitialized()
    {
        // Obtiene el tipo de sitio desde la configuración
        SiteType = Configuration["siteType"] ?? "n"; // Default to 'n' if no type is set

        // Define los mensajes para cada tipo de sitio
        Messages = new Dictionary<string, List<string>>
        {
            { "n", new List<string>
                {
                    "Sonríe como si fueras un niño",
                    "La felicidad está en los detalles pequeños",
                    "La inocencia captura la belleza del mundo",
                    "La alegría de un niño es un regalo inagotable.",
                    "Cada sonrisa es vida.",
                    "Pequeños momentos, grandes recuerdos.",
                    "Que tu imaginación nunca deje de volar.",
                }
            },
            { "p", new List<string>
                {
                    "Amor en cada mirada",
                    "Momentos que valen una eternidad",
                    "El amor es un viaje que vale la pena",
                    "Cada beso es una historia de amor en sí misma.",
                    "El amor no se mide en tiempo, sino en momentos.",
                    "Donde hay amor, siempre hay un hogar.",
                    "Dos corazones, un solo latido."
                }
            },
            { "f", new List<string>
                {
                    "Familia es donde la vida comienza y el amor nunca termina",
                    "Unidos por la vida",
                    "Los mejores recuerdos se hacen juntos",
                    "Juntos es mi lugar favorito.",
                    "Cada abrazo familiar es un lazo que nunca se rompe.",
                    "Las mejores aventuras se viven en familia.",
                    "Amor y risas: la fórmula secreta de la familia."
                }
            },
            { "e", new List<string>
                {
                    "Esperando un pequeño milagro",
                    "Cada vida comienza con amor",
                    "Esperando la mayor bendición de nuestras vidas.",
                    "Un pequeño milagro crece en cada latido.",
                    "El comienzo de un amor que no tiene fin.",
                    "Esperar a un hijo es esperar el mayor regalo.",
                    "Un pedacito de cielo creciendo en la tierra."
                }
            },
            { "q", new List<string>
                {
                    "Quince años de sueños y sonrisas",
                    "Brilla con todo tu esplendor",
                    "15 años de sueños, risas y aventuras.",
                    "Brilla como la estrella que eres.",
                    "Hoy es tu día para brillar con todo tu esplendor.",
                    "La vida es un baile; hoy comienza tu ritmo.",
                    "Una princesa en su mejor cuento de hadas."
                }
            }
        };
    }

    private string GetMessage(int index)
    {
        if (Messages.ContainsKey(SiteType))
        {
            var messagesForType = Messages[SiteType];
            return messagesForType[index % messagesForType.Count];
        }
        return "Descripción no disponible.";
    }

    private string GetGeneratedName(int index)
    {
        var names = new List<string>
        {
            "Únicos",
            "Especiales",
            "Brillantes",
            "Mágicos",
            "Eternos"
        };
        return names[index % names.Count];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Asegúrate de que esta función coincida con la definida en el archivo JS
            await JSRuntime.InvokeVoidAsync("initializeCarousel");
        }
    }
}
