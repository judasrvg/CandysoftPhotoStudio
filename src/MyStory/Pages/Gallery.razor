<div class="gallery-sections">
    @for (int i = 0; i < Images.Count; i++)
    {
        var index = i;
        <!-- Captura el valor de `i` en una variable local -->
        <div class="gallery-section @GetBackgroundClass(index)">
            @if (index % 2 == 0)
            {
                <div class="gallery-image">
                    <img src="@Images[index]" alt="Foto de la galería" @onclick="() => OpenLightbox(index)" />
                </div>
                <div class="gallery-text">
                    <p>@GetTextForImage(index)</p>
                </div>
            }
            else
            {
                <div class="gallery-text">
                    <p>@GetTextForImage(index)</p>
                </div>
                <div class="gallery-image">
                    <img src="@Images[index]" alt="Foto de la galería" @onclick="() => OpenLightbox(index)" />
                </div>
            }
        </div>
    }
</div>


<!-- Lightbox -->
@if (IsLightboxOpen)
{
    <div class="lightbox-overlay" @onclick="CloseLightbox">
        <div class="lightbox-content" @onclick:stopPropagation="true">
            <button class="lightbox-nav prev" @onclick="PreviousImage">&#10094;</button>
            <img src="@Images[CurrentImageIndex]" alt="Imagen ampliada" />
            <button class="lightbox-nav next" @onclick="NextImage">&#10095;</button>
            <button class="lightbox-close" @onclick="CloseLightbox">&times;</button>
        </div>
    </div>
}

@code {
    private List<string> Images = new List<string>
    {
        "css/images/img_1.webp",
        "css/images/img_2.webp",
        "css/images/img_3.webp",
        "css/images/img_4.webp",
        "css/images/img_5.webp"
    };

    private Dictionary<string, List<string>> Texts = new Dictionary<string, List<string>>
    {
        { "n", new List<string> { "Inocencia en cada sonrisa", "Pequeños detalles, grandes recuerdos", "Alegría en su máxima expresión", "Un instante de felicidad pura", "La magia de ser niño" } },
        { "q", new List<string> { "El brillo de los 15 años", "Una nueva etapa comienza", "Quince años de sueños", "Baila con todo tu esplendor", "Un día inolvidable" } },
        { "p", new List<string> { "Amor en cada mirada", "Dos corazones, un solo latido", "El amor es eterno", "Un viaje juntos", "Cada momento contigo es especial" } },
        { "f", new List<string> { "Familia, nuestro refugio", "La unión de corazones", "Juntos es nuestro lugar", "Los mejores recuerdos", "Donde el amor nunca termina" } },
        { "e", new List<string> { "Esperando un milagro", "El comienzo de una vida", "Una espera llena de amor", "Cada día más cerca", "Un latido dentro de otro" } }
    };

    private string SiteType = "n"; // Tipo de sitio, tomado de la configuración (n, q, p, f, e)

    // Lightbox state variables
    private bool IsLightboxOpen = false;
    private int CurrentImageIndex = 0;

    // Abrir lightbox con la imagen seleccionada
    private void OpenLightbox(int index)
    {
        if (index >= 0 && index < Images.Count)
        {
            CurrentImageIndex = index;
            IsLightboxOpen = true;
        }
    }


    // Cerrar lightbox
    private void CloseLightbox()
    {
        IsLightboxOpen = false;
    }


    // Navegar a la imagen anterior
    private void PreviousImage()
    {
        CurrentImageIndex = (CurrentImageIndex - 1 + Images.Count) % Images.Count;
    }

    // Navegar a la siguiente imagen
    private void NextImage()
    {
        CurrentImageIndex = (CurrentImageIndex + 1) % Images.Count;
    }

    // Obtener el texto correspondiente a la imagen
    private string GetTextForImage(int index)
    {
        if (Texts.ContainsKey(SiteType))
        {
            return Texts[SiteType][index % Texts[SiteType].Count];
        }
        return "Foto sin descripción";
    }

    // Obtener la clase de fondo para la sección
    private string GetBackgroundClass(int index)
    {
        var classes = new List<string> { "bg-white", "bg-light-gray", "bg-black", "bg-light-gray", "bg-white" };
        return classes[index % classes.Count];
    }
}
